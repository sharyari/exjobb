module ProblemFormulation where
import Data.Word
import qualified Data.ByteString.Char8 as B2
import Data.List as L



symbols = L.map (L.map B2.pack) [["f","l","1","2"],["f","l","1","2"]]

initial :: [Word8]
initial = [1,1,1]

transitions :: [([(Int,Int,Int)], (Int,String,String))]
transitions = [s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s15,r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14,r15,r16,r17,r18,r19,sync0,sync1,sync2,sync3,sync4,sync5,sync6,sync7,sync8,sync9,sync10,sync11]

s1 = ([(0,2,3)], (0,"!","f"))
s2 = ([(0,3,3)], (0,"!","f"))
s3 = ([(0,3,4)], (1,"?","f"))
s4 = ([(0,4,5)], (0,"!","0"))
s5 = ([(0,4,8)], (0,"!","l"))
s6 = ([(0,5,5)], (0,"!","0"))
s7 = ([(0,5,6)], (1,"?","0"))
s8 = ([(0,6,8)], (0,"!","l"))
s9 = ([(0,6,7)], (0,"!","1"))
s10 = ([(0,7,7)], (0,"!","1"))
s11 = ([(0,7,8)], (1,"?","1"))
s15 = ([(0,8,8)], (0,"!","l"))
r0 =  ([(1,1,2)], (1,"_","b"))
r1 = ([(1,2,3)], (0,"?","f"))
r2 = ([(1,3,3)], (1,"!","f"))
r3 = ([(1,3,4)], (1, "_", "b"))
r4 = ([(1,3,1)], (1, "_", "b"))
r5 = ([(1,3,8)], (1, "_", "b"))
r6 = ([(1,4,5)], (0,"?","0"))
r7 = ([(1,5,5)], (1,"!","0"))
r8 = ([(1,5,1)], (1, "_", "b"))
r9 = ([(1,5,5)], (1,"!","0"))
r10 = ([(1,5,6)], (1, "_", "b"))
r11 = ([(1,5,8)], (1, "_", "b"))
r12 = ([(1,6,7)], (0,"?","1"))
r13 = ([(1,7,7)], (1,"!","1"))
r14 = ([(1,7,1)], (1, "_", "b"))
r15 = ([(1,7,5)], (0,"?","0"))
r16 = ([(1,7,8)], (1, "_", "b"))
r17 = ([(1,8,9)], (0,"?","l"))
r18 = ([(1,9,9)], (1,"!","l"))
r19 = ([(1,9,1)], (1, "_", "b"))
sync0 = ([(0,8,1),(2,1,3)], (1,"_","b"))
sync1 = ([(0,8,1),(2,2,1)], (1,"_","b"))
sync2 = ([(0,1,2),(2,1,2)], (1,"_","b"))
sync3 = ([(0,1,2),(2,2,3)], (1,"_","b"))
sync4 = ([(0,8,1),(2,1,3)], (1,"_","b"))
sync5 = ([(0,8,1),(2,2,1)], (1,"_","b"))
sync6 = ([(0,7,1),(2,1,3)], (1,"_","b"))
sync7 = ([(0,7,1),(2,2,1)], (1,"_","b"))
sync8 = ([(0,3,1),(2,1,3)], (1,"_","b"))
sync9 = ([(0,3,1),(2,2,1)], (1,"_","b"))
sync10 = ([(0,5,1),(2,1,3)], (1,"_","b"))
sync11 = ([(0,5,1),(2,2,1)], (1,"_","b"))





numPrograms = 3
numStates1 :: Int
numStates1 = 8
numStates2 :: Int
numStates2 = 9
numStates3 :: Int
numStates3 = 3
